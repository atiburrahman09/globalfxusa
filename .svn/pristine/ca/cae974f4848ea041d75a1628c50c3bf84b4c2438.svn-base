using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Global.Core.DAL;
using Lumex.Tech;

namespace Global.Core.BLL
{
    public class UserAccountBLL
    {
        public bool GetTransiction()
        {
            UserAccountDLL aUser = new UserAccountDLL();
            bool status = false;
            DataTable dt = new DataTable();
            try
            {
                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt = aUser.GetTransiction(this, db);
                db.Stop();
                if (dt.Rows.Count > 0)
                {
                    status = true;

                }

            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                dt.Clear();
            }
            return status;
        }

        public string Type { get; set; }

        public string BankAccountNo { get; set; }

        public string TransferTo { get; set; }

        public string SwiftCode { get; set; }

        public string Pin { get; set; }

        public string TransferNote { get; set; }

        public DataTable GetUserPlacementInfoById(string UserId)
        {
            UserAccountDLL aUser = new UserAccountDLL();

            DataTable dt = new DataTable();
            try
            {
                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt = aUser.GetUserPlacementInfoById(UserId, db);
                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                //dt.Clear();
            }
            return dt;
        }

        public DataTable getAccountSummaryById(string UserId)
        {
            UserAccountDLL aUser = new UserAccountDLL();

            DataTable dt = new DataTable();
            try
            {
                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt = aUser.getAccountSummaryById(UserId, db);
                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                dt.Clear();
            }
            return dt;
        }


        public DataTable getUserIncomeStatementById(string UserId, string FromDate, string ToDate)
        {
            UserAccountDLL aUser = new UserAccountDLL();

            DataTable dt = new DataTable();
            try
            {
                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt = aUser.getUserIncomeStatementById(UserId, FromDate, ToDate, db);
                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                //   dt.Clear();
            }
            return dt;
        }


        public bool UpdateUserAccount(string UserId, string StakeId, string StakeKey)
        {
            UserAccountDLL aUser = new UserAccountDLL();
            bool status = false;
            DataTable dt = new DataTable();
            try
            {

                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt = aUser.UpdateUserAccount(UserId, StakeId, StakeKey, db);

                status = true;

                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            return status;
        }


        public bool InsertReceivePaymentWhenActive(string UserId, string RefferId, string Commission)
        {
            UserAccountDLL aUser = new UserAccountDLL();
            bool status = false;
            DataTable dt = new DataTable();
            try
            {

                LumexDBPlayer db = LumexDBPlayer.Start(true);
                aUser.InsertReceivePaymentWhenActive(UserId, RefferId, Commission, db);
                status = true;
                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            return status;
        }

        public string Amount { get; set; }

        public bool RequestToTransfer()
        {
            UserAccountDLL aUser = new UserAccountDLL();
            bool status = false;
            DataTable dt = new DataTable();
            try
            {

                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt = aUser.RequestToTransfer(this, db);
                if (dt.Rows.Count > 0)
                {
                    transfarId = dt.Rows[0][0].ToString();
                    status = true;
                }

                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            return status;
        }

        public string transfarType { get; set; }
        public string transfarId { get; set; }

        public DataTable getWithdrawRequestList(string fromDate, string toDate, string Status)
        {
            UserAccountDLL aUser = new UserAccountDLL();

            DataTable dt = new DataTable();
            try
            {
                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt = aUser.getWithdrawRequestList(fromDate, toDate, Status, db);
                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                //   dt.Clear();
            }
            return dt;
        }

        public DataTable getWithdrawRequestListForUser(string UserId, string formDate, string toDate, string status)
        {
            UserAccountDLL aUser = new UserAccountDLL();

            DataTable dt = new DataTable();
            try
            {
                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt = aUser.getWithdrawRequestListForUser(UserId, formDate, toDate, status, db);
                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                //   dt.Clear();
            }
            return dt;
        }

        public DataTable updateWithdrawRequest(string Id, string Status)
        {
            UserAccountDLL aUser = new UserAccountDLL();

            DataTable dt = new DataTable();
            try
            {
                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt = aUser.updateWithdrawRequest(Id, Status, db);
                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                //   dt.Clear();
            }
            return dt;
        }

        public void updateUserAccountforTransfer()
        {

            UserAccountDLL aUser = new UserAccountDLL();


            try
            {
                LumexDBPlayer db = LumexDBPlayer.Start(true);
                aUser.updateUserAccountforTransfer(this, db);
                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                //   dt.Clear();
            }

        }

        public bool generateDailyBonus(string Date)
        {
            UserAccountDLL aUser = new UserAccountDLL();
            bool status = false;
            DataTable dt = new DataTable();
            try
            {

                LumexDBPlayer db = LumexDBPlayer.Start(true);
                aUser.generateDailyBonus(Date, db);


                status = true;


                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
            return status;
        }

        public void InsertReceivePaymentWhenDailybonus()
        {
            UserAccountDLL aUser = new UserAccountDLL();
          
            DataTable dt = new DataTable();
            try
            {

                LumexDBPlayer db = LumexDBPlayer.Start(true);
                aUser.InsertReceivePaymentWhenDailybonus(db);
              
                db.Stop();


            }
            catch (Exception)
            {

                throw;
            }
           
        }

        public DataTable getGeneratedMoneyList()
        {
            UserAccountDLL aUser = new UserAccountDLL();

            DataTable dt = new DataTable();
            try
            {

                LumexDBPlayer db = LumexDBPlayer.Start(true);
                dt =  aUser.getGeneratedMoneyList(db);

                db.Stop();

                return dt;
            }
            catch (Exception)
            {

                throw;
            }
        }
    }
}
