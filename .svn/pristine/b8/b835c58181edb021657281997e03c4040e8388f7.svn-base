using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Lumex.Tech;

namespace Global.Core.DAL
{
    public class UserAccountDLL
    {
        internal System.Data.DataTable GetTransiction(BLL.UserAccountBLL userAccountBLL, Lumex.Tech.LumexDBPlayer db)
        {
            bool status = true;
            DataTable dt = new DataTable();
            try
            {

            }
            catch (Exception)
            {

                throw;

            }

            return dt;
        }

        internal System.Data.DataTable GetUserPlacementInfoById(string UserId, Lumex.Tech.LumexDBPlayer db)
        {
            bool status = true;
            DataTable dt = new DataTable();
            try
            {
                db.AddParameters("@UserId", UserId);
                dt = db.ExecuteDataTable("SELECT  [Serial],[UserId],[RefferId],[PleacementId],[PlacePosition],[StakeId],[StakeKey],[JoinDate],[isChecked],[CheckedDate],[ActiveDate],[JoinFrom],[ActiveFrom] FROM [dbo].[tblStakeJoining] where [UserId] =@UserId ");
            }
            catch (Exception)
            {

                throw;

            }

            return dt;
        }



        internal DataTable getAccountSummaryById(string UserId, Lumex.Tech.LumexDBPlayer db)
        {
            bool status = true;
            DataTable dt = new DataTable();
            try
            {
                db.AddParameters("@UserId", UserId);
                dt = db.ExecuteDataTable("SELECT [Serial],[UserId],isnull( [Income],0),isnull( [Deposit],0),isnull( [Commission],0),isnull( [FxFund],0),isnull( [TotalIncome],0) FROM [dbo].[tblUserAccounts] where [UserId] =@UserId ");
            }
            catch (Exception)
            {

                throw;

            }

            return dt;
        }


        internal DataTable getUserIncomeStatementById(string UserId, string FromDate, string ToDate, Lumex.Tech.LumexDBPlayer db)
        {
            bool status = true;
            DataTable dt = new DataTable();
            try
            {

                db.AddParameters("@UserId", UserId);
                db.AddParameters("@FromDate", FromDate);
                db.AddParameters("@ToDate", ToDate);
                dt = db.ExecuteDataTable("GET_USER_RECEIVE_PAYMENT_BY_DATE_RANGE", true);
            }
            catch (Exception)
            {

                throw;

            }

            return dt;
        }


        internal DataTable UpdateUserAccount(string UserId, string StakeId, string StakeKey, Lumex.Tech.LumexDBPlayer db)
        {
            bool status = true;
            DataTable dt = new DataTable();
            try
            {

                db.AddParameters("@UserId", UserId);
                db.AddParameters("@StakeId", StakeId);
                db.AddParameters("@StakeKey", StakeKey);
                db.AddParameters("@ActiveFrom", LumexLibraryManager.GetTerminal());
                dt = db.ExecuteDataTable("[Update_USER_ACCOUNT_ACTIVATION_BY_STAKE_KEY]", true);
            }
            catch (Exception)
            {

                throw;

            }

            return dt;
        }




        internal void InsertReceivePaymentWhenActive(string UserId, string RefferId, string Commission, LumexDBPlayer db)
        {


            try
            {

                db.AddParameters("@UserId", UserId);
                db.AddParameters("@RefferId", RefferId);
                db.AddParameters("@Commission", Commission);
                db.AddParameters("@CreatedFrom", LumexLibraryManager.GetTerminal());
                db.ExecuteNonQuery("[INSERT_RECEIVE_PAYMENT_WHEN_COMMISSION]", true);
            }
            catch (Exception)
            {

                throw;

            }


        }

        internal DataTable getTransferRequestByStatus(string Status, LumexDBPlayer db)
        {

            try
            {



                db.AddParameters("@Status", "P");
                db.AddParameters("@userId", (string)LumexSessionManager.Get("ActiveUserId"));

                DataTable dt = db.ExecuteDataTable("SELECT [Serial],[TransferId],[UserId],[TransferTo],[TransferType],[BankName],[SwiftCode],[Amount],[TransferNote],[RejectNote],[Status],[SuccessNote],[CreatedBy],[CreatedDate],[CreatedFrom] FROM [dbo].[tblWithdrawRequest] where Status=@Status and UserId=@userId");

                return dt;
            }
            catch (Exception)
            {

                throw;

            }
        }

        internal DataTable RequestToTransfer(BLL.UserAccountBLL userAccountBLL, LumexDBPlayer db)
        {

            try
            {
                        
                db.AddParameters("@UserId", (string)LumexSessionManager.Get("ActiveUserId"));
                db.AddParameters("@TransferTo", userAccountBLL.TransferTo);
                db.AddParameters("@TransferType", userAccountBLL.transfarType);
                db.AddParameters("@BankName", userAccountBLL.BankAccountNo);
                db.AddParameters("@SwiftCode", userAccountBLL.SwiftCode);
                db.AddParameters("@Amount", userAccountBLL.Amount);
                db.AddParameters("@TransferNote", userAccountBLL.TransferNote);
                db.AddParameters("@Status", "P");
                db.AddParameters("@CreatedBy", (string)LumexSessionManager.Get("ActiveUserId"));

                db.AddParameters("@CreatedFrom", LumexLibraryManager.GetTerminal());
                DataTable dt = db.ExecuteDataTable("[INSERT_WITHDRAW_REQUEST]", true);
                return dt;
            }
            catch (Exception)
            {

                throw;

            }
        }

        internal DataTable getWithdrawRequestList(string formDate, string toDate, string status, LumexDBPlayer db)
        {
            try
            {


                db.AddParameters("@Status", status);

                db.AddParameters("@formdate", formDate);
                db.AddParameters("@toDate", toDate);


                DataTable dt = db.ExecuteDataTable("SELECT [Serial],[TransferId],[UserId],[TransferTo],[TransferType],[BankName],[SwiftCode],[Amount],[TransferNote],[RejectNote],[Status],[SuccessNote],[CreatedBy],[CreatedDate],[CreatedFrom] FROM [dbo].[tblWithdrawRequest] where Status=@Status and  CAST(CreatedDate AS DATE) BETWEEN CAST(@formdate AS DATE) AND CAST(@toDate AS DATE)");
                return dt;
            }
            catch (Exception)
            {

                throw;

            }
        }

        internal DataTable getWithdrawRequestListForUser(string UserId, string formDate, string toDate, string status, LumexDBPlayer db)
        {
            try
            {

                db.AddParameters("@Status", status);
                db.AddParameters("@userId", UserId);
                db.AddParameters("@formdate", formDate);
                db.AddParameters("@toDate", toDate);


                DataTable dt = db.ExecuteDataTable("SELECT [Serial],[TransferId],[UserId],[TransferTo],[TransferType],[BankName],[SwiftCode],[Amount],[TransferNote],[RejectNote],[Status],[SuccessNote],[CreatedBy],[CreatedDate],[CreatedFrom] FROM [dbo].[tblWithdrawRequest] where Status=@Status and UserId=@userId and  CAST(CreatedDate AS DATE) BETWEEN CAST(@formdate AS DATE) AND CAST(@toDate AS DATE)");

                return dt;
            }
            catch (Exception)
            {

                throw;

            }
        }

        internal DataTable updateWithdrawRequest(string Id, string Status, LumexDBPlayer db)
        {
            try
            {

                db.AddParameters("@TransferId", Id);
                db.AddParameters("@Status", Status);
                db.AddParameters("@CreatedFrom", LumexLibraryManager.GetTerminal());
                db.AddParameters("@CreatedBy", (string)LumexSessionManager.Get("ActiveUserId"));


                DataTable dt = db.ExecuteDataTable("[INSERT_RECEIVE_PAYMENT_WHEN_TRANSFER_AMOUNT]", true);

                return dt;
            }
            catch (Exception)
            {

                throw;

            }
        }

        internal void updateUserAccountforTransfer(BLL.UserAccountBLL userAccountBLL, LumexDBPlayer db)
        {
            try
            {

                db.AddParameters("@Amount", userAccountBLL.Amount);
                db.AddParameters("@userId", (string)LumexSessionManager.Get("ActiveUserId"));

                db.ExecuteNonQuery("Update tblUserAccounts Set Income = ISNULL( Income,0)-@Amount where UserId=@userId");


            }
            catch (Exception)
            {

                throw;

            }
        }

        internal void generateDailyBonus(string Date, LumexDBPlayer db)
        {
            try
            {
               

                db.AddParameters("@CreatedBy", (string)LumexSessionManager.Get("ActiveUserId"));
                db.AddParameters("@CreatedFrom", LumexLibraryManager.GetTerminal());

                db.ExecuteNonQuery("[INSERT_DAILY_BONUS]",true);


            }
            catch (Exception)
            {

                throw;

            }
        }

        internal void InsertReceivePaymentWhenDailybonus(LumexDBPlayer db)
        {
            try
            {


                db.AddParameters("@CreatedBy", (string)LumexSessionManager.Get("ActiveUserId"));
                db.AddParameters("@CreatedFrom", LumexLibraryManager.GetTerminal());

                db.ExecuteNonQuery("[INSERT_RECEIVE_PAYMENT_WHEN_DAILY_BONUS]", true);


            }
            catch (Exception)
            {

                throw;

            }
        }
    }
}
